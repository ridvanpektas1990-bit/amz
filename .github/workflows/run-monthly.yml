name: Run Monthly ETL (manual)

on:
  workflow_dispatch: {}

jobs:
  fees:
    runs-on: ubuntu-latest
    env:
      TENANT_ID: ${{ vars.TENANT_ID }}
      SELLER_ID: ${{ vars.SELLER_ID }}
      MARKETPLACES_JSON: ${{ vars.MARKETPLACES_JSON }}
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      LWA_APP_ID: ${{ secrets.LWA_APP_ID }}
      LWA_CLIENT_ID: ${{ secrets.LWA_CLIENT_ID }}
      AMAZON_APP_ID: ${{ secrets.AMAZON_APP_ID }}
      LWA_CLIENT_SECRET: ${{ secrets.LWA_CLIENT_SECRET }}
      SP_API_REFRESH_TOKEN: ${{ secrets.SP_API_REFRESH_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - run: |
          python -m pip install -U pip
          pip install -U python-amazon-sp-api python-dotenv supabase requests tzdata

      - name: Normalize, autodetect CODE_DIR & validate (fees)
        run: |
          set -e
          python - << 'PY'
          import os, json, sys, re, pathlib
          root = pathlib.Path(".").resolve()
          env_file = os.environ["GITHUB_ENV"]
          def exp(k,v):
              with open(env_file,"a") as f: f.write(f"{k}={v}\n")
              print(f"export {k}={v if k=='CODE_DIR' else '***'}")
          lwa = os.getenv("LWA_APP_ID") or os.getenv("LWA_CLIENT_ID") or os.getenv("AMAZON_APP_ID")
          if not lwa: print("ERROR: need LWA_APP_ID/LWA_CLIENT_ID/AMAZON_APP_ID") or sys.exit(1)
          exp("LWA_APP_ID", lwa)
          sb_url = os.getenv("SUPABASE_URL")
          sb_key = os.getenv("SUPABASE_KEY") or os.getenv("SUPABASE_SERVICE_ROLE_KEY")
          if not (sb_url and sb_key): print("ERROR: SUPABASE_URL and one of SUPABASE_KEY/SERVICE_ROLE required") or sys.exit(1)
          exp("SUPABASE_KEY", sb_key)
          tenant = (os.getenv("TENANT_ID") or os.getenv("SELLER_ID") or "default").strip(); exp("TENANT_ID", tenant)
          raw = os.getenv("MARKETPLACES_JSON","")
          if not raw: arr=["DE"]
          else:
              try: val=json.loads(raw)
              except Exception: val=raw
              if isinstance(val,str):
                  s=val.strip().strip('"').strip("'"); import re
                  parts=[p.strip() for p in re.split(r'[,\s]+',s) if p.strip()]
                  arr=[p.upper() for p in parts] or ["DE"]
              elif isinstance(val,list): arr=[str(x).strip().upper() for x in val if str(x).strip()] or ["DE"]
              else: print('ERROR: MARKETPLACES_JSON invalid'); sys.exit(1)
          exp("MARKETPLACES_JSON", json.dumps(arr))
          for k in ["LWA_CLIENT_SECRET","SP_API_REFRESH_TOKEN","SUPABASE_URL"]:
              if not os.getenv(k): print(f"ERROR: missing {k}") or sys.exit(1)
          fee_dirs = {p.parent for p in root.rglob("AmzT_Fee.py")}
          sales_dirs = {p.parent for p in root.rglob("AmzT_Sales.py")}
          cand = (fee_dirs & sales_dirs) or fee_dirs or sales_dirs
          if not cand: print("ERROR: Could not locate AmzT_Fee.py/AmzT_Sales.py"); sys.exit(1)
          code_dir = sorted(cand, key=lambda p: len(str(p)))[0]
          exp("CODE_DIR", str(code_dir))
          print("Config (fees) normalized ✓")
          PY

      - name: Show repo & CODE_DIR
        run: |
          set -e
          echo "PWD=$(pwd)"
          ls -la
          echo "---- CODE_DIR ----"
          ls -la "$CODE_DIR"

      - name: Run Fees now (last month)
        working-directory: ${{ env.CODE_DIR }}
        run: |
          set -e
          LM_YEAR=$(date -u -d "$(date -u +%Y-%m-01) -1 month" +%Y)
          LM_MONTH=$(date -u -d "$(date -u +%Y-%m-01) -1 month" +%-m)
          MPS=$(python - <<'PY'
          import os, json; print(" ".join(json.loads(os.environ["MARKETPLACES_JSON"])))
          PY
          )
          for MP in $MPS; do
            echo "=== Fees → $MP ==="
            export MARKETPLACE="$MP"
            export ORDERS_YEAR="$LM_YEAR"
            export ORDERS_MONTH="$LM_MONTH"
            python AmzT_Fee.py
          done

  orders:
    runs-on: ubuntu-latest
    needs: fees
    env:
      TENANT_ID: ${{ vars.TENANT_ID }}
      SELLER_ID: ${{ vars.SELLER_ID }}
      MARKETPLACES_JSON: ${{ vars.MARKETPLACES_JSON }}
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      LWA_APP_ID: ${{ secrets.LWA_APP_ID }}
      LWA_CLIENT_ID: ${{ secrets.LWA_CLIENT_ID }}
      AMAZON_APP_ID: ${{ secrets.AMAZON_APP_ID }}
      LWA_CLIENT_SECRET: ${{ secrets.LWA_CLIENT_SECRET }}
      SP_API_REFRESH_TOKEN: ${{ secrets.SP_API_REFRESH_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - run: |
          python -m pip install -U pip
          pip install -U python-amazon-sp-api python-dotenv supabase requests tzdata

      - name: Normalize, autodetect CODE_DIR & validate (orders)
        run: |
          set -e
          python - << 'PY'
          import os, json, sys, re, pathlib
          root = pathlib.Path(".").resolve()
          env_file = os.environ["GITHUB_ENV"]
          def exp(k,v):
              with open(env_file,"a") as f: f.write(f"{k}={v}\n")
              print(f"export {k}={v if k=='CODE_DIR' else '***'}")
          lwa = os.getenv("LWA_APP_ID") or os.getenv("LWA_CLIENT_ID") or os.getenv("AMAZON_APP_ID")
          if not lwa: print("ERROR: need LWA_APP_ID/LWA_CLIENT_ID/AMAZON_APP_ID") or sys.exit(1)
          exp("LWA_APP_ID", lwa)
          sb_url = os.getenv("SUPABASE_URL")
          srv = os.getenv("SUPABASE_SERVICE_ROLE_KEY") or os.getenv("SUPABASE_KEY")
          if not (sb_url and srv): print("ERROR: SUPABASE_URL and one of SERVICE_ROLE/KEY required") or sys.exit(1)
          exp("SUPABASE_SERVICE_ROLE_KEY", srv)
          tenant = (os.getenv("TENANT_ID") or os.getenv("SELLER_ID") or "default").strip(); exp("TENANT_ID", tenant)
          raw = os.getenv("MARKETPLACES_JSON","")
          if not raw: arr=["DE"]
          else:
              try: val=json.loads(raw)
              except Exception: val=raw
              if isinstance(val,str):
                  s=val.strip().strip('"').strip("'"); import re
                  parts=[p.strip() for p in re.split(r'[,\s]+',s) if p.strip()]
                  arr=[p.upper() for p in parts] or ["DE"]
              elif isinstance(val,list): arr=[str(x).strip().upper() for x in val if str(x).strip()] or ["DE"]
              else: print('ERROR: MARKETPLACES_JSON invalid'); sys.exit(1)
          exp("MARKETPLACES_JSON", json.dumps(arr))
          for k in ["LWA_CLIENT_SECRET","SP_API_REFRESH_TOKEN","SUPABASE_URL"]:
              if not os.getenv(k): print(f"ERROR: missing {k}") or sys.exit(1)
          fee_dirs = {p.parent for p in root.rglob("AmzT_Fee.py")}
          sales_dirs = {p.parent for p in root.rglob("AmzT_Sales.py")}
          cand = (fee_dirs & sales_dirs) or sales_dirs or fee_dirs
          if not cand: print("ERROR: Could not locate AmzT_Sales.py"); sys.exit(1)
          code_dir = sorted(cand, key=lambda p: len(str(p)))[0]
          exp("CODE_DIR", str(code_dir))
          print("Config (orders) normalized ✓")
          PY

      - name: Show repo & CODE_DIR
        run: |
          set -e
          echo "PWD=$(pwd)"
          ls -la
          echo "---- CODE_DIR ----"
          ls -la "$CODE_DIR"

      - name: Run Orders now (last month)
        working-directory: ${{ env.CODE_DIR }}
        env:
          WRITE_CSV: "0"
          ORDERS_DATE_MODE: "created"
        run: |
          set -e
          LM_YEAR=$(date -u -d "$(date -u +%Y-%m-01) -1 month" +%Y)
          LM_MONTH=$(date -u -d "$(date -u +%Y-%m-01) -1 month" +%-m)
          MPS=$(python - <<'PY'
          import os, json; print(" ".join(json.loads(os.environ["MARKETPLACES_JSON"])))
          PY
          )
          for MP in $MPS; do
            echo "=== Orders → $MP ==="
            export MARKETPLACE="$MP"
            export ORDERS_YEAR="$LM_YEAR"
            export ORDERS_MONTH="$LM_MONTH"
            python AmzT_Sales.py
          done
