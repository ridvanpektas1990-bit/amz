name: Run ETL manually (Fees + Orders)

on:
  workflow_dispatch:
    inputs:
      year:
        description: "Year (YYYY). Empty = last month"
        required: false
        type: string
      month:
        description: "Month (1-12). Empty = last month"
        required: false
        type: string
      marketplaces_json:
        description: 'Override MARKETPLACES_JSON, e.g. ["DE","FR"]'
        required: false
        type: string
      date_mode:
        description: 'Orders date mode'
        required: false
        default: "created"
        type: choice
        options: [created, updated]

jobs:
  fees:
    runs-on: ubuntu-latest
    env:
      MARKETPLACES_JSON: ${{ inputs.marketplaces_json != '' && inputs.marketplaces_json || vars.MARKETPLACES_JSON }}
      TENANT_ID:         ${{ vars.TENANT_ID }}
      SELLER_ID:         ${{ vars.SELLER_ID }}

      SUPABASE_URL:      ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY:      ${{ secrets.SUPABASE_KEY != '' && secrets.SUPABASE_KEY || secrets.SUPABASE_SERVICE_ROLE_KEY }}

      LWA_APP_ID:        ${{ secrets.LWA_APP_ID != '' && secrets.LWA_APP_ID || (secrets.LWA_CLIENT_ID != '' && secrets.LWA_CLIENT_ID || secrets.AMAZON_APP_ID) }}
      LWA_CLIENT_SECRET: ${{ secrets.LWA_CLIENT_SECRET }}
      SP_API_REFRESH_TOKEN: ${{ secrets.SP_API_REFRESH_TOKEN }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - run: |
          python -m pip install -U pip
          pip install -U python-amazon-sp-api python-dotenv supabase requests tzdata

      - name: Validate config (fees)
        run: |
          set -e
          python - << 'PY'
          import os, json, sys
          req = ["SUPABASE_URL","SUPABASE_KEY","LWA_APP_ID","LWA_CLIENT_SECRET","SP_API_REFRESH_TOKEN","TENANT_ID","MARKETPLACES_JSON"]
          miss=[k for k in req if not os.getenv(k)]
          if miss: print("Missing env:", miss) or sys.exit(1)
          try:
              mps=json.loads(os.environ["MARKETPLACES_JSON"])
              assert isinstance(mps,list) and all(isinstance(x,str) for x in mps)
          except Exception as e:
              print('MARKETPLACES_JSON must be JSON like ["DE","FR"]'); print("Error:", e); sys.exit(1)
          print("Config (fees) OK ✓")
          PY

      - name: Compute period (inputs or last month)
        id: period
        run: |
          if [ -n "${{ inputs.year }}" ] && [ -n "${{ inputs.month }}" ]; then
            y="${{ inputs.year }}"; m=$(printf "%02d" "${{ inputs.month }}")
          else
            y=$(date -u -d "$(date +%Y-%m-01) -1 month" +%Y)
            m=$(date -u -d "$(date +%Y-%m-01) -1 month" +%m)
          fi
          echo "year=$y"  >> "$GITHUB_OUTPUT"
          echo "month=$m" >> "$GITHUB_OUTPUT"
          echo "Period: $y-$m"

      - name: Run Fees
        working-directory: libs/finance
        env:
          ORDERS_YEAR:  ${{ steps.period.outputs.year }}
          ORDERS_MONTH: ${{ steps.period.outputs.month }}
        run: |
          set -e
          MP_LIST=$(python - <<'PY'
          import os, json; print("\n".join(json.loads(os.environ["MARKETPLACES_JSON"])))
          PY
          )
          for MP in $MP_LIST; do
            echo "➡️ Fees for marketplace ${MP} (${ORDERS_YEAR}-${ORDERS_MONTH})"
            MARKETPLACE="$MP" python AmzT_Fee.py
          done

  orders:
    runs-on: ubuntu-latest
    needs: fees
    env:
      MARKETPLACES_JSON: ${{ inputs.marketplaces_json != '' && inputs.marketplaces_json || vars.MARKETPLACES_JSON }}
      TENANT_ID:         ${{ vars.TENANT_ID }}
      SELLER_ID:         ${{ vars.SELLER_ID }}

      SUPABASE_URL:             ${{ secrets.SUPABASE_URL }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY != '' && secrets.SUPABASE_SERVICE_ROLE_KEY || secrets.SUPABASE_KEY }}

      LWA_APP_ID:        ${{ secrets.LWA_APP_ID != '' && secrets.LWA_APP_ID || (secrets.LWA_CLIENT_ID != '' && secrets.LWA_CLIENT_ID || secrets.AMAZON_APP_ID) }}
      LWA_CLIENT_SECRET: ${{ secrets.LWA_CLIENT_SECRET }}
      SP_API_REFRESH_TOKEN: ${{ secrets.SP_API_REFRESH_TOKEN }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - run: |
          python -m pip install -U pip
          pip install -U python-amazon-sp-api python-dotenv supabase requests tzdata

      - name: Validate config (orders)
        run: |
          set -e
          python - << 'PY'
          import os, json, sys
          req = ["SUPABASE_URL","SUPABASE_SERVICE_ROLE_KEY","LWA_APP_ID","LWA_CLIENT_SECRET","SP_API_REFRESH_TOKEN","TENANT_ID","MARKETPLACES_JSON"]
          miss=[k for k in req if not os.getenv(k)]
          if miss: print("Missing env:", miss) or sys.exit(1)
          try:
              mps=json.loads(os.environ["MARKETPLACES_JSON"])
              assert isinstance(mps,list) and all(isinstance(x,str) for x in mps)
          except Exception as e:
              print('MARKETPLACES_JSON must be JSON like ["DE","FR"]'); print("Error:", e); sys.exit(1)
          print("Config (orders) OK ✓")
          PY

      - name: Compute period (inputs or last month)
        id: period
        run: |
          if [ -n "${{ inputs.year }}" ] && [ -n "${{ inputs.month }}" ]; then
            y="${{ inputs.year }}"; m=$(printf "%02d" "${{ inputs.month }}")
          else
            y=$(date -u -d "$(date +%Y-%m-01) -1 month" +%Y)
            m=$(date -u -d "$(date +%Y-%m-01) -1 month" +%m)
          fi
          echo "year=$y"  >> "$GITHUB_OUTPUT"
          echo "month=$m" >> "$GITHUB_OUTPUT"
          echo "Period: $y-$m"

      - name: Run Orders
        working-directory: libs/finance
        env:
          WRITE_CSV: "0"
          ORDERS_DATE_MODE: ${{ inputs.date_mode }}
          ORDERS_YEAR:  ${{ steps.period.outputs.year }}
          ORDERS_MONTH: ${{ steps.period.outputs.month }}
        run: |
          set -e
          MP_LIST=$(python - <<'PY'
          import os, json; print("\n".join(json.loads(os.environ["MARKETPLACES_JSON"])))
          PY
          )
          for MP in $MP_LIST; do
            echo "➡️ Orders for marketplace ${MP} (${ORDERS_YEAR}-${ORDERS_MONTH})"
            MARKETPLACE="$MP" python AmzT_Sales.py
          done
