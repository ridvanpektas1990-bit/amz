name: Run ETL manually (Fees + Orders)

on:
  workflow_dispatch:
    inputs:
      year:
        description: "Year (YYYY). Empty = last month"
        required: false
        type: string
      month:
        description: "Month (1-12). Empty = last month"
        required: false
        type: string
      marketplaces_json:
        description: 'Override MARKETPLACES_JSON, e.g. ["DE","FR"]'
        required: false
        type: string
      date_mode:
        description: 'Orders date mode'
        required: false
        default: "created"
        type: choice
        options: [created, updated]

jobs:
  fees:
    runs-on: ubuntu-latest
    env:
      MARKETPLACES_JSON: ${{ inputs.marketplaces_json != '' && inputs.marketplaces_json || vars.MARKETPLACES_JSON }}
      TENANT_ID:         ${{ vars.TENANT_ID }}
      SELLER_ID:         ${{ vars.SELLER_ID }}

      SUPABASE_URL:      ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY:      ${{ secrets.SUPABASE_KEY }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

      LWA_APP_ID:        ${{ secrets.LWA_APP_ID }}
      LWA_CLIENT_ID:     ${{ secrets.LWA_CLIENT_ID }}
      AMAZON_APP_ID:     ${{ secrets.AMAZON_APP_ID }}
      LWA_CLIENT_SECRET: ${{ secrets.LWA_CLIENT_SECRET }}
      SP_API_REFRESH_TOKEN: ${{ secrets.SP_API_REFRESH_TOKEN }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - run: |
          python -m pip install -U pip
          pip install -U python-amazon-sp-api python-dotenv supabase requests tzdata

      - name: Normalize & validate env (fees)
        run: |
          set -e
          python - << 'PY'
          import os, json, sys
          GITHUB_ENV = os.environ["GITHUB_ENV"]
          def exp(k,v):
              with open(GITHUB_ENV,"a") as f: f.write(f"{k}={v}\n")
              print(f"export {k} = ****")

          lwa = os.getenv("LWA_APP_ID") or os.getenv("LWA_CLIENT_ID") or os.getenv("AMAZON_APP_ID")
          if not lwa: print("ERROR: need LWA_APP_ID/LWA_CLIENT_ID/AMAZON_APP_ID") or sys.exit(1)
          exp("LWA_APP_ID", lwa)

          sb_url = os.getenv("SUPABASE_URL")
          sb_key = os.getenv("SUPABASE_KEY") or os.getenv("SUPABASE_SERVICE_ROLE_KEY")
          if not (sb_url and sb_key):
              print("ERROR: SUPABASE_URL and one of SUPABASE_KEY / SUPABASE_SERVICE_ROLE_KEY are required")
              sys.exit(1)
          exp("SUPABASE_KEY", sb_key)

          tenant = (os.getenv("TENANT_ID") or os.getenv("SELLER_ID") or "default").strip()
          exp("TENANT_ID", tenant)

          mps = os.getenv("MARKETPLACES_JSON") or '["DE"]'
          try:
              arr = json.loads(mps); assert isinstance(arr, list) and all(isinstance(x,str) for x in arr)
          except Exception as e:
              print('ERROR: MARKETPLACES_JSON must be JSON like ["DE","FR"]'); print("detail:", e); sys.exit(1)

          for k in ["LWA_CLIENT_SECRET","SP_API_REFRESH_TOKEN"]:
              if not os.getenv(k): print(f"ERROR: missing {k}") or sys.exit(1)

          print("Config (fees) normalized ✓")
          PY

      - name: Compute period (inputs or last month)
        id: period
        run: |
          if [ -n "${{ inputs.year }}" ] && [ -n "${{ inputs.month }}" ]; then
            y="${{ inputs.year }}"; m=$(printf "%02d" "${{ inputs.month }}")
          else
            y=$(date -u -d "$(date +%Y-%m-01) -1 month" +%Y)
            m=$(date -u -d "$(date +%Y-%m-01) -1 month" +%m)
          fi
          echo "year=$y"  >> "$GITHUB_OUTPUT"
          echo "month=$m" >> "$GITHUB_OUTPUT"
          echo "Period: $y-$m"

      - name: Run Fees
        working-directory: libs/finance
        env:
          ORDERS_YEAR:  ${{ steps.period.outputs.year }}
          ORDERS_MONTH: ${{ steps.period.outputs.month }}
        run: |
          set -e
          MP_LIST=$(python - <<'PY'
          import os, json; print("\n".join(json.loads(os.environ.get("MARKETPLACES_JSON",'["DE"]'))))
          PY
          )
          for MP in $MP_LIST; do
            echo "➡️ Fees for marketplace ${MP} (${ORDERS_YEAR}-${ORDERS_MONTH})"
            MARKETPLACE="$MP" python AmzT_Fee.py
          done

  orders:
    runs-on: ubuntu-latest
    needs: fees
    env:
      MARKETPLACES_JSON: ${{ inputs.marketplaces_json != '' && inputs.marketplaces_json || vars.MARKETPLACES_JSON }}
      TENANT_ID:         ${{ vars.TENANT_ID }}
      SELLER_ID:         ${{ vars.SELLER_ID }}

      SUPABASE_URL:      ${{ secrets.SUPABASE_URL }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      SUPABASE_KEY:      ${{ secrets.SUPABASE_KEY }}

      LWA_APP_ID:        ${{ secrets.LWA_APP_ID }}
      LWA_CLIENT_ID:     ${{ secrets.LWA_CLIENT_ID }}
      AMAZON_APP_ID:     ${{ secrets.AMAZON_APP_ID }}
      LWA_CLIENT_SECRET: ${{ secrets.LWA_CLIENT_SECRET }}
      SP_API_REFRESH_TOKEN: ${{ secrets.SP_API_REFRESH_TOKEN }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - run: |
          python -m pip install -U pip
          pip install -U python-amazon-sp-api python-dotenv supabase requests tzdata

      - name: Normalize & validate env (orders)
        run: |
          set -e
          python - << 'PY'
          import os, json, sys
          GITHUB_ENV = os.environ["GITHUB_ENV"]
          def exp(k,v):
              with open(GITHUB_ENV,"a") as f: f.write(f"{k}={v}\n")
              print(f"export {k} = ****")

          lwa = os.getenv("LWA_APP_ID") or os.getenv("LWA_CLIENT_ID") or os.getenv("AMAZON_APP_ID")
          if not lwa: print("ERROR: need LWA_APP_ID/LWA_CLIENT_ID/AMAZON_APP_ID") or sys.exit(1)
          exp("LWA_APP_ID", lwa)

          sb_url = os.getenv("SUPABASE_URL")
          srv = os.getenv("SUPABASE_SERVICE_ROLE_KEY") or os.getenv("SUPABASE_KEY")
          if not (sb_url and srv):
              print("ERROR: SUPABASE_URL and one of SUPABASE_SERVICE_ROLE_KEY / SUPABASE_KEY are required")
              sys.exit(1)
          exp("SUPABASE_SERVICE_ROLE_KEY", srv)

          tenant = (os.getenv("TENANT_ID") or os.getenv("SELLER_ID") or "default").strip()
          exp("TENANT_ID", tenant)

          mps = os.getenv("MARKETPLACES_JSON") or '["DE"]'
          try:
              arr = json.loads(mps); assert isinstance(arr, list) and all(isinstance(x,str) for x in arr)
          except Exception as e:
              print('ERROR: MARKETPLACES_JSON must be JSON like ["DE","FR"]'); print("detail:", e); sys.exit(1)

          for k in ["LWA_CLIENT_SECRET","SP_API_REFRESH_TOKEN"]:
              if not os.getenv(k): print(f"ERROR: missing {k}") or sys.exit(1)

          print("Config (orders) normalized ✓")
          PY

      - name: Compute period (inputs or last month)
        id: period
        run: |
          if [ -n "${{ inputs.year }}" ] && [ -n "${{ inputs.month }}" ]; then
            y="${{ inputs.year }}"; m=$(printf "%02d" "${{ inputs.month }}")
          else
            y=$(date -u -d "$(date +%Y-%m-01) -1 month" +%Y)
            m=$(date -u -d "$(date +%Y-%m-01) -1 month" +%m)
          fi
          echo "year=$y"  >> "$GITHUB_OUTPUT"
          echo "month=$m" >> "$GITHUB_OUTPUT"
          echo "Period: $y-$m"

      - name: Run Orders
        working-directory: libs/finance
        env:
          WRITE_CSV: "0"
          ORDERS_DATE_MODE: ${{ inputs.date_mode }}
          ORDERS_YEAR:  ${{ steps.period.outputs.year }}
          ORDERS_MONTH: ${{ steps.period.outputs.month }}
        run: |
          set -e
          MP_LIST=$(python - <<'PY'
          import os, json; print("\n".join(json.loads(os.environ.get("MARKETPLACES_JSON",'["DE"]'))))
          PY
          )
          for MP in $MP_LIST; do
            echo "➡️ Orders for marketplace ${MP} (${ORDERS_YEAR}-${ORDERS_MONTH})"
            MARKETPLACE="$MP" python AmzT_Sales.py
          done
