name: Monthly ETL (Fees + Orders)

on:
  schedule:
    - cron: "15 2 3 * *"   # jeden Monat am 3. um 02:15 UTC
  workflow_dispatch: {}

jobs:
  fees:
    runs-on: ubuntu-latest
    env:
      # Vars
      TENANT_ID:          ${{ vars.TENANT_ID }}
      SELLER_ID:          ${{ vars.SELLER_ID }}
      MARKETPLACES_JSON:  ${{ vars.MARKETPLACES_JSON }}

      # Supabase
      SUPABASE_URL:       ${{ secrets.SUPABASE_URL }}
      # Fees nimmt primär SUPABASE_KEY, fällt sonst auf SERVICE_ROLE zurück
      SUPABASE_KEY:       ${{ secrets.SUPABASE_KEY != '' && secrets.SUPABASE_KEY || secrets.SUPABASE_SERVICE_ROLE_KEY }}

      # LWA / SP-API (LWA_APP_ID alias auf LWA_CLIENT_ID/AMAZON_APP_ID)
      LWA_APP_ID:         ${{ secrets.LWA_APP_ID != '' && secrets.LWA_APP_ID || (secrets.LWA_CLIENT_ID != '' && secrets.LWA_CLIENT_ID || secrets.AMAZON_APP_ID) }}
      LWA_CLIENT_SECRET:  ${{ secrets.LWA_CLIENT_SECRET }}
      SP_API_REFRESH_TOKEN: ${{ secrets.SP_API_REFRESH_TOKEN }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          pip install -U python-amazon-sp-api python-dotenv supabase requests tzdata

      - name: Secrets presence (fees)
        run: |
          echo "SUPABASE_URL:         $([ -n "${SUPABASE_URL}" ] && echo set || echo EMPTY)"
          echo "SUPABASE_KEY:         $([ -n "${SUPABASE_KEY}" ] && echo set || echo EMPTY)"
          echo "LWA_APP_ID:           $([ -n "${LWA_APP_ID}" ] && echo set || echo EMPTY)"
          echo "LWA_CLIENT_SECRET:    $([ -n "${LWA_CLIENT_SECRET}" ] && echo set || echo EMPTY)"
          echo "SP_API_REFRESH_TOKEN: $([ -n "${SP_API_REFRESH_TOKEN}" ] && echo set || echo EMPTY)"
          echo "TENANT_ID:            $([ -n "${TENANT_ID}" ] && echo set || echo EMPTY)"
          echo "MARKETPLACES_JSON:    ${MARKETPLACES_JSON}"

      - name: Validate config (fees)
        run: |
          set -e
          python - << 'PY'
          import os, json, sys
          req = ["SUPABASE_URL","SUPABASE_KEY","LWA_APP_ID","LWA_CLIENT_SECRET","SP_API_REFRESH_TOKEN","TENANT_ID","MARKETPLACES_JSON"]
          miss=[k for k in req if not os.getenv(k)]
          if miss: print("Missing env:", miss) or sys.exit(1)
          try:
              mps=json.loads(os.environ["MARKETPLACES_JSON"])
              assert isinstance(mps,list) and all(isinstance(x,str) for x in mps)
          except Exception as e:
              print('MARKETPLACES_JSON must be JSON like ["DE","FR"]'); print("Error:", e); sys.exit(1)
          print("Config (fees) OK ✓")
          PY

      - name: Compute period (last month)
        id: period
        run: |
          y=$(date -u -d "$(date +%Y-%m-01) -1 month" +%Y)
          m=$(date -u -d "$(date +%Y-%m-01) -1 month" +%m)
          echo "year=$y"  >> "$GITHUB_OUTPUT"
          echo "month=$m" >> "$GITHUB_OUTPUT"
          echo "Period: $y-$m"

      - name: Run Fees for all marketplaces
        working-directory: libs/finance
        env:
          ORDERS_YEAR:  ${{ steps.period.outputs.year }}
          ORDERS_MONTH: ${{ steps.period.outputs.month }}
        run: |
          set -e
          MP_LIST=$(python - <<'PY'
          import os, json; print("\n".join(json.loads(os.environ["MARKETPLACES_JSON"])))
          PY
          )
          for MP in $MP_LIST; do
            echo "➡️ Fees for marketplace ${MP} (${ORDERS_YEAR}-${ORDERS_MONTH})"
            MARKETPLACE="$MP" python AmzT_Fee.py
          done

  orders:
    runs-on: ubuntu-latest
    needs: fees
    env:
      # Vars
      TENANT_ID:          ${{ vars.TENANT_ID }}
      SELLER_ID:          ${{ vars.SELLER_ID }}
      MARKETPLACES_JSON:  ${{ vars.MARKETPLACES_JSON }}

      # Supabase
      SUPABASE_URL:             ${{ secrets.SUPABASE_URL }}
      # Orders nimmt primär SERVICE_ROLE, fällt sonst auf normale KEY zurück
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY != '' && secrets.SUPABASE_SERVICE_ROLE_KEY || secrets.SUPABASE_KEY }}

      # LWA / SP-API (gleicher Alias)
      LWA_APP_ID:         ${{ secrets.LWA_APP_ID != '' && secrets.LWA_APP_ID || (secrets.LWA_CLIENT_ID != '' && secrets.LWA_CLIENT_ID || secrets.AMAZON_APP_ID) }}
      LWA_CLIENT_SECRET:  ${{ secrets.LWA_CLIENT_SECRET }}
      SP_API_REFRESH_TOKEN: ${{ secrets.SP_API_REFRESH_TOKEN }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          pip install -U python-amazon-sp-api python-dotenv supabase requests tzdata

      - name: Secrets presence (orders)
        run: |
          echo "SUPABASE_URL:               $([ -n "${SUPABASE_URL}" ] && echo set || echo EMPTY)"
          echo "SUPABASE_SERVICE_ROLE_KEY:  $([ -n "${SUPABASE_SERVICE_ROLE_KEY}" ] && echo set || echo EMPTY)"
          echo "LWA_APP_ID:                 $([ -n "${LWA_APP_ID}" ] && echo set || echo EMPTY)"
          echo "LWA_CLIENT_SECRET:          $([ -n "${LWA_CLIENT_SECRET}" ] && echo set || echo EMPTY)"
          echo "SP_API_REFRESH_TOKEN:       $([ -n "${SP_API_REFRESH_TOKEN}" ] && echo set || echo EMPTY)"
          echo "TENANT_ID:                  $([ -n "${TENANT_ID}" ] && echo set || echo EMPTY)"
          echo "MARKETPLACES_JSON:          ${MARKETPLACES_JSON}"

      - name: Validate config (orders)
        run: |
          set -e
          python - << 'PY'
          import os, json, sys
          req = ["SUPABASE_URL","SUPABASE_SERVICE_ROLE_KEY","LWA_APP_ID","LWA_CLIENT_SECRET","SP_API_REFRESH_TOKEN","TENANT_ID","MARKETPLACES_JSON"]
          miss=[k for k in req if not os.getenv(k)]
          if miss: print("Missing env:", miss) or sys.exit(1)
          try:
              mps=json.loads(os.environ["MARKETPLACES_JSON"])
              assert isinstance(mps,list) and all(isinstance(x,str) for x in mps)
          except Exception as e:
              print('MARKETPLACES_JSON must be JSON like ["DE","FR"]'); print("Error:", e); sys.exit(1)
          print("Config (orders) OK ✓")
          PY

      - name: Compute period (last month)
        id: period
        run: |
          y=$(date -u -d "$(date +%Y-%m-01) -1 month" +%Y)
          m=$(date -u -d "$(date +%Y-%m-01) -1 month" +%m)
          echo "year=$y"  >> "$GITHUB_OUTPUT"
          echo "month=$m" >> "$GITHUB_OUTPUT"
          echo "Period: $y-$m"

      - name: Run Orders for all marketplaces
        working-directory: libs/finance
        env:
          WRITE_CSV: "0"
          ORDERS_DATE_MODE: "created"
          ORDERS_YEAR:  ${{ steps.period.outputs.year }}
          ORDERS_MONTH: ${{ steps.period.outputs.month }}
        run: |
          set -e
          MP_LIST=$(python - <<'PY'
          import os, json; print("\n".join(json.loads(os.environ["MARKETPLACES_JSON"])))
          PY
          )
          for MP in $MP_LIST; do
            echo "➡️ Orders for marketplace ${MP} (${ORDERS_YEAR}-${ORDERS_MONTH})"
            MARKETPLACE="$MP" python AmzT_Sales.py
          done
