name: Monthly ETL

on:
  schedule:
    - cron: "15 2 3 * *"   # UTC
  workflow_dispatch: {}

jobs:
  fees:
    runs-on: ubuntu-latest
    env:
      TENANT_ID: ${{ vars.TENANT_ID }}
      SELLER_ID: ${{ vars.SELLER_ID }}
      MARKETPLACES_JSON: ${{ vars.MARKETPLACES_JSON }}
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      LWA_APP_ID: ${{ secrets.LWA_APP_ID }}
      LWA_CLIENT_SECRET: ${{ secrets.LWA_CLIENT_SECRET }}
      SP_API_REFRESH_TOKEN: ${{ secrets.SP_API_REFRESH_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          pip install -U python-amazon-sp-api python-dotenv supabase requests tzdata

      # ⬇️ Hier einfügen: Validate config (VOR dem Python-Run)
      - name: Validate config
        run: |
          set -e
          python - << 'PY'
          import os, json, sys
          required = [
            "SUPABASE_URL","LWA_APP_ID","LWA_CLIENT_SECRET","SP_API_REFRESH_TOKEN",
            "TENANT_ID","MARKETPLACES_JSON"
          ]
          missing = [k for k in required if not os.getenv(k)]
          if not os.getenv("SUPABASE_KEY") and not os.getenv("SUPABASE_SERVICE_ROLE_KEY"):
              print("At least one of SUPABASE_KEY or SUPABASE_SERVICE_ROLE_KEY must be provided")
              sys.exit(1)
          if missing:
              print("Missing env:", missing); sys.exit(1)
          try:
              mps = json.loads(os.environ["MARKETPLACES_JSON"])
              assert isinstance(mps, list) and all(isinstance(x, str) for x in mps)
          except Exception as e:
              print('MARKETPLACES_JSON must be JSON like ["DE","FR"]')
              print("Error:", e); sys.exit(1)
          print("Config looks good ✓")
          PY

      - name: Run Fees
        working-directory: libs/finance
        env:
          # Monat/Jahr optional – default: Vormonat aus deinem Script
          ORDERS_YEAR: ""
          ORDERS_MONTH: ""
        run: |
          # Beispiel: nur DE (oder in einer Schleife über MARKETPLACES_JSON)
          export MARKETPLACE=DE
          python AmzT_Fee.py

  orders:
    runs-on: ubuntu-latest
    needs: fees
    env:
      TENANT_ID: ${{ vars.TENANT_ID }}
      SELLER_ID: ${{ vars.SELLER_ID }}
      MARKETPLACES_JSON: ${{ vars.MARKETPLACES_JSON }}
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      LWA_APP_ID: ${{ secrets.LWA_APP_ID }}
      LWA_CLIENT_SECRET: ${{ secrets.LWA_CLIENT_SECRET }}
      SP_API_REFRESH_TOKEN: ${{ secrets.SP_API_REFRESH_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          pip install -U python-amazon-sp-api python-dotenv supabase requests tzdata

      # ⬇️ Hier wieder einfügen (vor dem Orders-Run)
      - name: Validate config
        run: |
          set -e
          python - << 'PY'
          import os, json, sys
          required = [
            "SUPABASE_URL","LWA_APP_ID","LWA_CLIENT_SECRET","SP_API_REFRESH_TOKEN",
            "TENANT_ID","MARKETPLACES_JSON"
          ]
          missing = [k for k in required if not os.getenv(k)]
          if not os.getenv("SUPABASE_KEY") and not os.getenv("SUPABASE_SERVICE_ROLE_KEY"):
              print("At least one of SUPABASE_KEY or SUPABASE_SERVICE_ROLE_KEY must be provided")
              sys.exit(1)
          if missing:
              print("Missing env:", missing); sys.exit(1)
          try:
              mps = json.loads(os.environ["MARKETPLACES_JSON"])
              assert isinstance(mps, list) and all(isinstance(x, str) for x in mps)
          except Exception as e:
              print('MARKETPLACES_JSON must be JSON like ["DE","FR"]')
              print("Error:", e); sys.exit(1)
          print("Config looks good ✓")
          PY

      - name: Run Orders
        working-directory: libs/finance
        env:
          WRITE_CSV: "0"
          ORDERS_DATE_MODE: "created"
        run: |
          export MARKETPLACE=DE
          python AmzT_Sales.py
