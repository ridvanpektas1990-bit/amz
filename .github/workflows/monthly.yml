name: Monthly ETL (Fees + Orders)

on:
  schedule:
    - cron: "15 2 3 * *"   # jeden Monat am 3. um 02:15 UTC
  workflow_dispatch: {}

jobs:
  fees:
    runs-on: ubuntu-latest
    env:
      # ---- Vars (Repo → Settings → Variables) ----
      TENANT_ID:         ${{ vars.TENANT_ID }}
      SELLER_ID:         ${{ vars.SELLER_ID }}
      MARKETPLACES_JSON: ${{ vars.MARKETPLACES_JSON }}

      # ---- Secrets (Repo → Settings → Secrets) ----
      SUPABASE_URL:      ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY:      ${{ secrets.SUPABASE_KEY }}                 # optional; Fallback = SERVICE_ROLE
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

      # LWA / SP-API (mind. eins von LWA_APP_ID, LWA_CLIENT_ID, AMAZON_APP_ID)
      LWA_APP_ID:        ${{ secrets.LWA_APP_ID }}
      LWA_CLIENT_ID:     ${{ secrets.LWA_CLIENT_ID }}
      AMAZON_APP_ID:     ${{ secrets.AMAZON_APP_ID }}
      LWA_CLIENT_SECRET: ${{ secrets.LWA_CLIENT_SECRET }}
      SP_API_REFRESH_TOKEN: ${{ secrets.SP_API_REFRESH_TOKEN }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          pip install -U python-amazon-sp-api python-dotenv supabase requests tzdata

      - name: Normalize & validate env (fees)
        run: |
          set -e
          python - << 'PY'
          import os, json, sys, pathlib
          GITHUB_ENV = os.environ["GITHUB_ENV"]

          def exp(k,v):
              with open(GITHUB_ENV,"a") as f: f.write(f"{k}={v}\n")
              print(f"export {k} = ****")

          # --- LWA_APP_ID Fallback ---
          lwa = os.getenv("LWA_APP_ID") or os.getenv("LWA_CLIENT_ID") or os.getenv("AMAZON_APP_ID")
          if not lwa:
              print("ERROR: provide one of LWA_APP_ID or LWA_CLIENT_ID or AMAZON_APP_ID")
              sys.exit(1)
          exp("LWA_APP_ID", lwa)

          # --- Supabase: prefer SUPABASE_KEY; else SERVICE_ROLE ---
          sb_url = os.getenv("SUPABASE_URL")
          sb_key = os.getenv("SUPABASE_KEY") or os.getenv("SUPABASE_SERVICE_ROLE_KEY")
          if not (sb_url and sb_key):
              print("ERROR: SUPABASE_URL and one of SUPABASE_KEY / SUPABASE_SERVICE_ROLE_KEY are required")
              sys.exit(1)
          exp("SUPABASE_KEY", sb_key)  # Fees-Script nutzt SUPABASE_KEY

          # --- Tenant fallback ---
          tenant = (os.getenv("TENANT_ID") or os.getenv("SELLER_ID") or "default").strip()
          exp("TENANT_ID", tenant)

          # --- MARKETPLACES_JSON validate (default ["DE"]) ---
          mps = os.getenv("MARKETPLACES_JSON") or '["DE"]'
          try:
              arr = json.loads(mps); assert isinstance(arr, list) and all(isinstance(x,str) for x in arr)
          except Exception as e:
              print('ERROR: MARKETPLACES_JSON must be JSON like ["DE","FR"]'); print("detail:", e); sys.exit(1)

          # --- other required secrets ---
          for k in ["LWA_CLIENT_SECRET","SP_API_REFRESH_TOKEN"]:
              if not os.getenv(k): print(f"ERROR: missing {k}") or sys.exit(1)

          print("Config (fees) normalized ✓")
          PY

      - name: Compute period (last month)
        id: period
        run: |
          y=$(date -u -d "$(date +%Y-%m-01) -1 month" +%Y)
          m=$(date -u -d "$(date +%Y-%m-01) -1 month" +%m)
          echo "year=$y"  >> "$GITHUB_OUTPUT"
          echo "month=$m" >> "$GITHUB_OUTPUT"
          echo "Period: $y-$m"

      - name: Run Fees for all marketplaces
        working-directory: libs/finance
        env:
          ORDERS_YEAR:  ${{ steps.period.outputs.year }}
          ORDERS_MONTH: ${{ steps.period.outputs.month }}
        run: |
          set -e
          MP_LIST=$(python - <<'PY'
          import os, json; print("\n".join(json.loads(os.environ.get("MARKETPLACES_JSON",'["DE"]'))))
          PY
          )
          for MP in $MP_LIST; do
            echo "➡️ Fees for marketplace ${MP} (${ORDERS_YEAR}-${ORDERS_MONTH})"
            MARKETPLACE="$MP" python AmzT_Fee.py
          done

  orders:
    runs-on: ubuntu-latest
    needs: fees
    env:
      TENANT_ID:         ${{ vars.TENANT_ID }}
      SELLER_ID:         ${{ vars.SELLER_ID }}
      MARKETPLACES_JSON: ${{ vars.MARKETPLACES_JSON }}

      SUPABASE_URL:      ${{ secrets.SUPABASE_URL }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}  # optional; Fallback = SUPABASE_KEY
      SUPABASE_KEY:      ${{ secrets.SUPABASE_KEY }}

      LWA_APP_ID:        ${{ secrets.LWA_APP_ID }}
      LWA_CLIENT_ID:     ${{ secrets.LWA_CLIENT_ID }}
      AMAZON_APP_ID:     ${{ secrets.AMAZON_APP_ID }}
      LWA_CLIENT_SECRET: ${{ secrets.LWA_CLIENT_SECRET }}
      SP_API_REFRESH_TOKEN: ${{ secrets.SP_API_REFRESH_TOKEN }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          pip install -U python-amazon-sp-api python-dotenv supabase requests tzdata

      - name: Normalize & validate env (orders)
        run: |
          set -e
          python - << 'PY'
          import os, json, sys
          GITHUB_ENV = os.environ["GITHUB_ENV"]
          def exp(k,v):
              with open(GITHUB_ENV,"a") as f: f.write(f"{k}={v}\n")
              print(f"export {k} = ****")

          # LWA_APP_ID fallback
          lwa = os.getenv("LWA_APP_ID") or os.getenv("LWA_CLIENT_ID") or os.getenv("AMAZON_APP_ID")
          if not lwa: print("ERROR: need LWA_APP_ID/LWA_CLIENT_ID/AMAZON_APP_ID") or sys.exit(1)
          exp("LWA_APP_ID", lwa)

          # Supabase: prefer SERVICE_ROLE for Orders; else fall back to SUPABASE_KEY
          sb_url = os.getenv("SUPABASE_URL")
          srv = os.getenv("SUPABASE_SERVICE_ROLE_KEY") or os.getenv("SUPABASE_KEY")
          if not (sb_url and srv):
              print("ERROR: SUPABASE_URL and one of SUPABASE_SERVICE_ROLE_KEY / SUPABASE_KEY are required")
              sys.exit(1)
          exp("SUPABASE_SERVICE_ROLE_KEY", srv)

          tenant = (os.getenv("TENANT_ID") or os.getenv("SELLER_ID") or "default").strip()
          exp("TENANT_ID", tenant)

          mps = os.getenv("MARKETPLACES_JSON") or '["DE"]'
          try:
              arr = json.loads(mps); assert isinstance(arr, list) and all(isinstance(x,str) for x in arr)
          except Exception as e:
              print('ERROR: MARKETPLACES_JSON must be JSON like ["DE","FR"]'); print("detail:", e); sys.exit(1)

          for k in ["LWA_CLIENT_SECRET","SP_API_REFRESH_TOKEN"]:
              if not os.getenv(k): print(f"ERROR: missing {k}") or sys.exit(1)

          print("Config (orders) normalized ✓")
          PY

      - name: Compute period (last month)
        id: period
        run: |
          y=$(date -u -d "$(date +%Y-%m-01) -1 month" +%Y)
          m=$(date -u -d "$(date +%Y-%m-01) -1 month" +%m)
          echo "year=$y"  >> "$GITHUB_OUTPUT"
          echo "month=$m" >> "$GITHUB_OUTPUT"
          echo "Period: $y-$m"

      - name: Run Orders for all marketplaces
        working-directory: libs/finance
        env:
          WRITE_CSV: "0"
          ORDERS_DATE_MODE: "created"
          ORDERS_YEAR:  ${{ steps.period.outputs.year }}
          ORDERS_MONTH: ${{ steps.period.outputs.month }}
        run: |
          set -e
          MP_LIST=$(python - <<'PY'
          import os, json; print("\n".join(json.loads(os.environ.get("MARKETPLACES_JSON",'["DE"]'))))
          PY
          )
          for MP in $MP_LIST; do
            echo "➡️ Orders for marketplace ${MP} (${ORDERS_YEAR}-${ORDERS_MONTH})"
            MARKETPLACE="$MP" python AmzT_Sales.py
          done
