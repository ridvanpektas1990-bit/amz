name: Monthly ETL

on:
  schedule:
    - cron: "15 2 3 * *"   # am 3. des Monats, 02:15 UTC
  workflow_dispatch: {}

jobs:
  fees:
    runs-on: ubuntu-latest
    env:
      CODE_DIR: Python/libs/finance
      TENANT_ID: ${{ vars.TENANT_ID }}
      SELLER_ID: ${{ vars.SELLER_ID }}
      MARKETPLACES_JSON: ${{ vars.MARKETPLACES_JSON }}
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }} # Fees nutzt diesen Key
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }} # Fallback erlaubt
      LWA_APP_ID: ${{ secrets.LWA_APP_ID }}
      LWA_CLIENT_ID: ${{ secrets.LWA_CLIENT_ID }} # optionaler Fallback
      AMAZON_APP_ID: ${{ secrets.AMAZON_APP_ID }} # optionaler Fallback
      LWA_CLIENT_SECRET: ${{ secrets.LWA_CLIENT_SECRET }}
      SP_API_REFRESH_TOKEN: ${{ secrets.SP_API_REFRESH_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          pip install -U python-amazon-sp-api python-dotenv supabase requests tzdata

      - name: Normalize & validate env (fees)
        run: |
          set -e
          python - << 'PY'
          import os, json, sys, re, pathlib
          GITHUB_ENV = os.environ["GITHUB_ENV"]
          def exp(k,v):
              with open(GITHUB_ENV,"a") as f: f.write(f"{k}={v}\n")
              print(f"export {k}=***")

          # LWA_APP_ID Fallbacks
          lwa = os.getenv("LWA_APP_ID") or os.getenv("LWA_CLIENT_ID") or os.getenv("AMAZON_APP_ID")
          if not lwa:
              print("ERROR: need LWA_APP_ID (or LWA_CLIENT_ID / AMAZON_APP_ID)"); sys.exit(1)
          exp("LWA_APP_ID", lwa)

          # Supabase Key (Fees bevorzugt SUPABASE_KEY)
          sb_url = os.getenv("SUPABASE_URL")
          sb_key = os.getenv("SUPABASE_KEY") or os.getenv("SUPABASE_SERVICE_ROLE_KEY")
          if not (sb_url and sb_key):
              print("ERROR: SUPABASE_URL and one of SUPABASE_KEY / SUPABASE_SERVICE_ROLE_KEY required"); sys.exit(1)
          exp("SUPABASE_KEY", sb_key)

          # Tenant Fallback
          tenant = (os.getenv("TENANT_ID") or os.getenv("SELLER_ID") or "default").strip()
          exp("TENANT_ID", tenant)

          # MARKETPLACES_JSON tolerant
          raw = os.getenv("MARKETPLACES_JSON","")
          if not raw:
              arr = ["DE"]
          else:
              try:
                  val = json.loads(raw)
              except Exception:
                  val = raw
              if isinstance(val, str):
                  s = val.strip().strip('"').strip("'")
                  parts = [p.strip() for p in re.split(r'[,\s]+', s) if p.strip()]
                  arr = [p.upper() for p in parts] or ["DE"]
              elif isinstance(val, list):
                  arr = [str(x).strip().upper() for x in val if str(x).strip()] or ["DE"]
              else:
                  print('ERROR: MARKETPLACES_JSON must be like DE or ["DE","FR"]'); sys.exit(1)
          exp("MARKETPLACES_JSON", json.dumps(arr))

          # Required secrets
          for k in ["LWA_CLIENT_SECRET","SP_API_REFRESH_TOKEN","SUPABASE_URL"]:
              if not os.getenv(k): print(f"ERROR: missing {k}") or sys.exit(1)

          # Code dir exists?
          cdir = os.getenv("CODE_DIR","")
          if not cdir or not pathlib.Path(cdir).is_dir():
              print(f"ERROR: CODE_DIR '{cdir}' not found in repo"); sys.exit(1)

          print("Config (fees) normalized ✓")
          PY

      - name: Show repo layout
        run: |
          set -e
          echo "PWD=$(pwd)"
          ls -la
          echo "----"
          ls -la "$CODE_DIR"

      - name: Run Fees (last month) for each marketplace
        working-directory: ${{ env.CODE_DIR }}
        env:
          LOCAL_TZ: "Europe/Berlin"
        run: |
          set -e
          # Vormonat bestimmen (UTC, unabhängig vom Runner-TZ)
          LM_YEAR=$(date -u -d "$(date -u +%Y-%m-01) -1 month" +%Y)
          LM_MONTH=$(date -u -d "$(date -u +%Y-%m-01) -1 month" +%-m)
          echo "Period: ${LM_YEAR}-${LM_MONTH}"

          MPS=$(python - <<'PY'
          import os, json; print(" ".join(json.loads(os.environ["MARKETPLACES_JSON"])))
          PY
          )

          for MP in $MPS; do
            echo "=== Fees → $MP ==="
            export MARKETPLACE="$MP"
            export ORDERS_YEAR="$LM_YEAR"
            export ORDERS_MONTH="$LM_MONTH"
            python AmzT_Fee.py
          done

  orders:
    runs-on: ubuntu-latest
    needs: fees
    env:
      CODE_DIR: Python/libs/finance
      TENANT_ID: ${{ vars.TENANT_ID }}
      SELLER_ID: ${{ vars.SELLER_ID }}
      MARKETPLACES_JSON: ${{ vars.MARKETPLACES_JSON }}
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }} # Fallback erlaubt
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }} # Orders bevorzugt diesen Key
      LWA_APP_ID: ${{ secrets.LWA_APP_ID }}
      LWA_CLIENT_ID: ${{ secrets.LWA_CLIENT_ID }}
      AMAZON_APP_ID: ${{ secrets.AMAZON_APP_ID }}
      LWA_CLIENT_SECRET: ${{ secrets.LWA_CLIENT_SECRET }}
      SP_API_REFRESH_TOKEN: ${{ secrets.SP_API_REFRESH_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          pip install -U python-amazon-sp-api python-dotenv supabase requests tzdata

      - name: Normalize & validate env (orders)
        run: |
          set -e
          python - << 'PY'
          import os, json, sys, re, pathlib
          GITHUB_ENV = os.environ["GITHUB_ENV"]
          def exp(k,v):
              with open(GITHUB_ENV,"a") as f: f.write(f"{k}={v}\n")
              print(f"export {k}=***")

          # LWA_APP_ID Fallbacks
          lwa = os.getenv("LWA_APP_ID") or os.getenv("LWA_CLIENT_ID") or os.getenv("AMAZON_APP_ID")
          if not lwa:
              print("ERROR: need LWA_APP_ID (or LWA_CLIENT_ID / AMAZON_APP_ID)"); sys.exit(1)
          exp("LWA_APP_ID", lwa)

          # Orders: SERVICE_ROLE bevorzugt (sonst SUPABASE_KEY)
          sb_url = os.getenv("SUPABASE_URL")
          srv = os.getenv("SUPABASE_SERVICE_ROLE_KEY") or os.getenv("SUPABASE_KEY")
          if not (sb_url and srv):
              print("ERROR: SUPABASE_URL and one of SUPABASE_SERVICE_ROLE_KEY / SUPABASE_KEY required"); sys.exit(1)
          exp("SUPABASE_SERVICE_ROLE_KEY", srv)

          # Tenant fallback
          tenant = (os.getenv("TENANT_ID") or os.getenv("SELLER_ID") or "default").strip()
          exp("TENANT_ID", tenant)

          # MARKETPLACES_JSON tolerant
          raw = os.getenv("MARKETPLACES_JSON","")
          if not raw:
              arr = ["DE"]
          else:
              try:
                  val = json.loads(raw)
              except Exception:
                  val = raw
              if isinstance(val, str):
                  import re
                  s = val.strip().strip('"').strip("'")
                  parts = [p.strip() for p in re.split(r'[,\s]+', s) if p.strip()]
                  arr = [p.upper() for p in parts] or ["DE"]
              elif isinstance(val, list):
                  arr = [str(x).strip().upper() for x in val if str(x).strip()] or ["DE"]
              else:
                  print('ERROR: MARKETPLACES_JSON must be like DE or ["DE","FR"]'); sys.exit(1)
          exp("MARKETPLACES_JSON", json.dumps(arr))

          # Required secrets
          for k in ["LWA_CLIENT_SECRET","SP_API_REFRESH_TOKEN","SUPABASE_URL"]:
              if not os.getenv(k): print(f"ERROR: missing {k}") or sys.exit(1)

          # Code dir exists?
          cdir = os.getenv("CODE_DIR","")
          if not cdir or not pathlib.Path(cdir).is_dir():
              print(f"ERROR: CODE_DIR '{cdir}' not found in repo"); sys.exit(1)

          print("Config (orders) normalized ✓")
          PY

      - name: Show repo layout
        run: |
          set -e
          echo "PWD=$(pwd)"
          ls -la
          echo "----"
          ls -la "$CODE_DIR"

      - name: Run Orders (last month) for each marketplace
        working-directory: ${{ env.CODE_DIR }}
        env:
          WRITE_CSV: "0"
          ORDERS_DATE_MODE: "created"
        run: |
          set -e
          LM_YEAR=$(date -u -d "$(date -u +%Y-%m-01) -1 month" +%Y)
          LM_MONTH=$(date -u -d "$(date -u +%Y-%m-01) -1 month" +%-m)
          echo "Period: ${LM_YEAR}-${LM_MONTH}"

          MPS=$(python - <<'PY'
          import os, json; print(" ".join(json.loads(os.environ["MARKETPLACES_JSON"])))
          PY
          )

          for MP in $MPS; do
            echo "=== Orders → $MP ==="
            export MARKETPLACE="$MP"
            export ORDERS_YEAR="$LM_YEAR"
            export ORDERS_MONTH="$LM_MONTH"
            python AmzT_Sales.py
          done
