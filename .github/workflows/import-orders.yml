name: Nightly Amazon Orders Import

on:
  schedule:
    # Läuft täglich 01:30 UTC (= 04:30 Europa/Istanbul ganzjährig)
    - cron: "30 1 * * *"
  workflow_dispatch:
    inputs:
      tenant_id:
        description: "Optional: Nur diesen Seller (tenant_id/Seller-ID) importieren"
        required: false
        type: string
      batch_limit:
        description: "Wie viele Monate in diesem Lauf ziehen (pro Seller)"
        required: false
        default: "3"
        type: string
      marketplaces:
        description: "Kommagetrennt (z.B. A1PA6795UKMFR9,A1F83G8C2ARO7P). Leer = alle bekannten"
        required: false
        type: string
      dry_run:
        description: "Nur anzeigen, was importiert würde (true/false)"
        required: false
        default: "false"
        type: choice
        options: [ "false", "true" ]

env:
  TZ: Europe/Istanbul  # Logs in deiner Lokalzeit
  PYTHONUNBUFFERED: "1"

jobs:
  import:
    name: Run nightly import
    runs-on: ubuntu-latest

    # Verhindert Überschneidungen (z.B. wenn ein Lauf länger dauert)
    concurrency:
      group: nightly-orders-import
      cancel-in-progress: false

    timeout-minutes: 55  # genug Zeit, aber kein Endloslauf

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run importer (orders -> amazon_orders & amazon_order_items)
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          LWA_CLIENT_ID: ${{ secrets.LWA_CLIENT_ID }}
          LWA_CLIENT_SECRET: ${{ secrets.LWA_CLIENT_SECRET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SELLING_PARTNER_ROLE_ARN: ${{ secrets.AWS_SELLING_PARTNER_ROLE_ARN }}
          # Inputs (können in deinem Script als ENV gelesen werden)
          TENANT_ID: ${{ inputs.tenant_id }}
          BATCH_LIMIT: ${{ inputs.batch_limit }}
          MARKETPLACES: ${{ inputs.marketplaces }}
          DRY_RUN: ${{ inputs.dry_run }}
        run: |
          # >>>>>>> HIER DEIN PYTHON-STARTBEFEHL <<<<<<<
          # Beispiel: python scripts/import_orders.py
          # Dein Script soll:
          #  - offene import_jobs (queued/requested) je Tenant holen
          #  - pro Monat Report anfordern/pollen
          #  - amazon_orders & amazon_order_items upserten
          #  - import_jobs.status -> loaded setzen
          #
          # Inputs aus ENV verwenden:
          #   TENANT_ID (optional), BATCH_LIMIT (z.B. 3),
          #   MARKETPLACES (optional Liste), DRY_RUN (true/false)
          #
          python scripts/import_orders.py

      - name: Upload logs (optional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: importer-logs
          path: |
            **/*.log
            importer-output*.txt
          if-no-files-found: ignore
